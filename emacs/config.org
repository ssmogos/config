#+OPTIONS: num:nil toc:nil
#+TITLE: Emacs configuration
#+STARTUP: content

* Repos
** Elpa melpa and tromey
#+BEGIN_SRC emacs-lisp
(setq
 package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "https://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa" . 1)))
#+END_SRC


* UI and behaviour changes
** Set theme and hide menu bar
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (load-theme 'wheatgrass)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Set focus on split window
#+BEGIN_SRC emacs-lisp
;; switch window and change focus to new opened one
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC

** Highlight the current cursor line
#+BEGIN_SRC emacs-lisp
 ;; (global-hl-line-mode t)
#+END_SRC
** Cursor position
Show the current line and column for your cursor.
We are not going to have =relative-linum-mode= in every major mode, so this is useful.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Nice search with swipper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** Switch multiple split windows 
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Use chrome to browse
   #+begin_src emacs-lisp
   (setq browse-url-browser-function `browse-url-chrome)
   #+end_src
** Highlights cursor
#+BEGIN_SRC emacs-lisp
;(use-package beacon
;  :ensure t
;  :defer 2
;  :diminish beacon-mode
;  :config
;  (beacon-mode 1))
#+END_SRC


* Functionality
** Start emacs server automatically
   #+begin_src emacs-lisp
   (server-start)
   #+end_src
** Use shift keys to navigate through windows
#+BEGIN_SRC emacs-lisp
  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

(when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

#+END_SRC

** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+END_SRC
** Enabled ido everywhere
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (setq ido-enable-flex-matching t)
  (ido-everywhere t)
  (ido-mode 1))

(use-package ido-vertical-mode
  :ensure t
  :defer 1
  :config
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
  (ido-vertical-mode 1)
)

#+END_SRC

** Browse kill ring
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :bind ("M-y" . browse-kill-ring)
    :config (setq browse-kill-ring-replace-yank t) ; act like yank-popup
    )

	  
#+END_SRC

** Show line numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
#+END_SRC
** Use path from shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
 :ensure t
 :config
  (setq exec-path-from-shell-variables (quote ("PATH" "MANPATH" "GOPATH")))
  (exec-path-from-shell-initialize))
#+END_SRC
** Move selected region up or down
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :bind
  (([(meta shift up)] . move-text-up)
   ([(meta shift down)] . move-text-down)))
#+END_SRC
** Markdown mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . gfm-mode))
  :config
  (setq markdown-fontify-code-blocks-natively t))
#+END_SRC

** Open with
#+BEGIN_SRC emacs-lisp

(defun er-open-with (arg)
  "Open visited file with specified external"
  (interactive "P")
  (when buffer-file-name
    (shell-command (concat
                    (cond
                     ;;((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                     (t (read-shell-command "Open current file with: ")))
                    " "
                    (shell-quote-argument buffer-file-name)))))

(global-set-key (kbd "C-c o") #'er-open-with)
#+END_SRC

#+RESULTS:
: er-open-with


* Key bindings
#+BEGIN_SRC emacs-lisp 
  ;; show magit
  (global-set-key (kbd "C-x g") 'magit-status)

  ;; enable ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Increase window size
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-]") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-[") 'shrink-window-horizontally)
  (global-set-key (kbd "s--") 'shrink-window)
  (global-set-key (kbd "s-=") 'enlarge-window)
#+END_SRC


* Addional packages
** Install restclinet
   #+begin_src emacs-lisp
   (use-package restclient
   :ensure t
   )
   #+end_src

** Try a package without install
#+BEGIN_SRC emacs-lisp
  (use-package try
	  :ensure t)
#+END_SRC

** Which key - shows help on the key bindings
#+BEGIN_SRC emacs-lisp
   (use-package which-key
	  :ensure t 
	  :config
	  (which-key-mode))
#+END_SRC

** Auto complete
#+BEGIN_SRC emacs-lisp
;  (use-package auto-complete
;    :ensure t
;    :init
;    (progn
;      (ac-config-default)
;      (auto-complete-mode t)
;   ))
#+END_SRC
** Company - automcomplete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0.5)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 2)
  (setq company-tooltip-align-annotations t)
  ;; invert the navigation direction if the the completion popup-isearch-match
  ;; is displayed on top (happens near the bottom of windows)
  (setq company-tooltip-flip-when-above t)
  (global-company-mode))

#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC
** Kubernetes
#+BEGIN_SRC emacs-lisp
(use-package kubernetes
   :ensure t)
;(use-package kubernetes-evil
;   :ensure t)
#+END_SRC
** Http requests for orgmode
#+BEGIN_SRC emacs-lisp
(use-package ob-http
  :ensure t)
(use-package ob-restclient
  :ensure t)
#+END_SRC

** Graphql mode
#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode
    :ensure t)
#+END_SRC

** Smex for smart M+x
   #+begin_src emacs-lisp
   (use-package smex
  :ensure t
  :bind
  ("M-x" . 'smex)
  ("M-X" . 'smex-major-mode-commands)
  ("C-c C-c M-x" . 'execute-extended-command))
   #+end_src


* Utility functions
** Copy selected file path

#+BEGIN_SRC emacs-lisp

  (defun ssmogos/file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
			default-directory
		      (buffer-file-name))))
      (when filename
	(with-temp-buffer
	  (insert filename)
	  (clipboard-kill-region (point-min) (point-max)))
	(message filename))))


 ;; (global-set-key (kbd "C-c P") 'ssmogos/file-name-on-clipboard)
#+END_SRC

** Install async
   #+begin_src emacs-lisp
     (use-package async
     :ensure t)
     (require 'ob-async)
   #+end_src
** Use async mode
Lets us use asynchronous processes wherever possible, pretty useful.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

** Set browser
#+BEGIN_SRC emacs-lisp 
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+END_SRC

** json and yaml func
#+BEGIN_SRC emacs-lisp
  ;; requires https://www.npmjs.com/package/json2yaml
  (defun ssmogos/json2yaml ()
    "Current json buffer to yaml `json2yaml'"
    (interactive)
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "json2yaml"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*json2yaml Buffer*"
     ;; show error buffer?
     t))

  ;; requires npm https://www.npmjs.com/package/yaml2json
  (defun ssmogos/yaml2json ()
    "Current yml buffer to json `yaml2json'"
    (interactive)
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "yaml2json"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*yaml2json Buffer*"
     ;; show error buffer?
     t))

#+END_SRC

** Open emacs config
#+BEGIN_SRC emacs-lisp
  (defun ssmogos/config-visit ()
    (interactive)
    (find-file "~/dev/ssmogos/config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'ssmogos/config-visit)
#+END_SRC
** Reload emacs config
#+BEGIN_SRC emacs-lisp
  (defun ssmogos/config-reload ()
    "Reloads config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/dev/ssmogos/config/emacs/config.org")))
  (global-set-key (kbd "C-c r") 'ssmogos/config-reload)
#+END_SRC

** Json and Yaml modes 
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :commands (yaml-mode)
)

    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
#+END_SRC



* Projectile
Projectile is an awesome project manager, mostly because it recognizes directories
with a =.git= directory as projects and helps you manage them accordingly.

** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :init
	(projectile-mode 1)
	(setq projectile-completion-system 'ivy)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))

(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "s-G") 'projectile-grep)
(define-key projectile-mode-map (kbd "s-g") 'projectile-find-file-dwim)
#+END_SRC

** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC


* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
     
      (setq dashboard-items '((recents  . 10)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+END_SRC


* Babel languages
** Enable languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (shell . t)
	 (http . t)
	 (java . t)
         (python . t)
         (js . t)
         (ditaa .t)
         (org .t)
         (restclient .t)
         
	 ))


(setq org-ditaa-jar-path "~/.emacs.d/ditaa-0.11.0-standalone.jar")

#+END_SRC

** Define extra orgmode templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("http" . "src http"))
(add-to-list 'org-structure-template-alist '("bashv" . "src bash :results output replace"))
(add-to-list 'org-structure-template-alist '("bash" . "src bash"))

(require 'org-tempo)

(tempo-define-template "my-property"
               '(":PROPERTIES:" p ":END:")
               "<p"
               "Insert a property tempate")

(tempo-define-template "javaexec"
               '("#+HEADERS: :classname " p ":cmdline \"-cp .\"\n#+BEGIN_SRC java :results output :exports both \n\n#+END_SRC")
               "<javaex"
               "Insert a property tempate")

(tempo-define-template "my-name"
               '("#+NAME: " p "")
               "<n"
               "Insert a property tempate")


#+END_SRC


** Don't ask for confirmation for those languages
#+BEGIN_SRC emacs-lisp
;; disable asking for confirmation on execution in orgmode
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("bash" "emacs-lisp" "sh" "http" "java"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC


* Git integration
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
** Git gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter                                                                                              
    :ensure t                                                                                                          
    :init                                                                                                              
    (when (display-graphic-p)                                                                                          
	(use-package git-gutter-fringe                                                                                 
	  :ensure t))                                                                                                  
    (global-git-gutter-mode)
  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  )   
#+END_SRC

** Git link
   #+begin_src emacs-lisp
   (use-package git-link
  :ensure t
  :custom
  (git-link-remote-alist
   (quote
    (("github" git-link-github)
     ("bitbucket" git-link-bitbucket)
     ("gitorious" git-link-gitorious)
     ("gitlab" git-link-gitlab)
     ("git.ecd.axway.int" git-link-gitlab)))))
   #+end_src

* File navigation
** Use the same buffer with dired when navigating with 'a'
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Define key for find name dired
#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map "F" 'find-name-dired)
#+END_SRC



* Presentation
** Epresent
#+BEGIN_SRC emacs-lisp
  (use-package epresent
     :ensure t)
#+END_SRC
** Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :load-path "~/dev/emacs_deps/org-reveal") ;; where the https://github.com/yjwen/org-reveal repo is clone)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;(setq org-reveal-root "file:///home/ssmogos/dev/emacs_deps/reveal.js/reveal.js-3.7.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
#+END_SRC

#+RESULTS:


* Popup menu
#+BEGIN_SRC emacs-lisp
;; Popup menu - works in different contexts
      (use-package popup-imenu
	:commands popup-imenu
	:ensure t
	:bind ("M-i" . popup-imenu))

      (setq popup-imenu-position 'point)

#+END_SRC


* Treemacs and java

  #+begin_src emacs-lisp
  (use-package yasnippet
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :ensure t
  :config
  (yas-reload-all)
  )
  #+end_src

  #+begin_src emacs-lisp
  (use-package treemacs
  :ensure t)
  #+end_src


  #+begin_src emacs-lisp
  (use-package lsp-mode
  :ensure t
  :demand t
  :init (setq lsp-inhibit-message nil ; you may set this to t to hide messages from message area
		 lsp-eldoc-render-all nil
	         lsp-prefer-flymake nil
		 lsp-highlight-symbol-at-point nil))
  #+end_src

  #+begin_src emacs-lisp
  (use-package lsp-treemacs
  :ensure t)
  #+end_src

  #+begin_src emacs-lisp
  (use-package company-lsp
  :after  company
  :ensure t
  :config
  (add-hook 'java-mode-hook (lambda () (push 'company-lsp company-backends)))
  (setq company-lsp-enable-snippet t
        company-lsp-cache-candidates t))
  #+end_src

  #+begin_src emacs-lisp
  (use-package lsp-ui
  :ensure t
  :demand t
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-symbol t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-update-mode 'point))
  #+end_src

  #+begin_src emacs-lisp
  (use-package lsp-java
  :ensure t
  :config
  ;; add lombok as agent for eclipse jdt
  (setq lsp-java-vmargs
	       (quote("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "-javaagent:/home/ssmogos/.java/lombok.jar")))
  (add-hook 'java-mode-hook #'lsp))
  #+end_src

  #+begin_src emacs-lisp
  (use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))

(use-package dap-java
  :after (lsp-java))
  #+end_src
