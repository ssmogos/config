#+STARTUP: content

* Repos
** Elpa melpa and tromey
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("ELPA"  . "http://tromey.com/elpa/")
			 ("gnu"   . "http://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
))
#+END_SRC


* UI and behaviour changes
** Set theme and hide menu bar
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (load-theme 'misterioso)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Set focus on split window
#+BEGIN_SRC emacs-lisp
;; switch window and change focus to new opened one
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC

** Highlight the current cursor line
#+BEGIN_SRC emacs-lisp
 ;; (global-hl-line-mode t)
#+END_SRC
** Cursor position
Show the current line and column for your cursor.
We are not going to have =relative-linum-mode= in every major mode, so this is useful.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Nice search with swipper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** Switch multiple split windows 
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Highlights cursor
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :defer 2
  :diminish beacon-mode
  :config
  (beacon-mode 1))
#+END_SRC


* Functionality
** Use shift keys to navigate through windows
#+BEGIN_SRC emacs-lisp
  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

(when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

#+END_SRC

** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Enabled ido everywhere
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (setq ido-enable-flex-matching t)
  (ido-everywhere t)
  (ido-mode 1))
#+END_SRC



* Key bindings
#+BEGIN_SRC emacs-lisp 
  ;; show magit
  (global-set-key (kbd "C-x g") 'magit-status)
  ;; enable ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC


* Addional packages
** Try a package without install
#+BEGIN_SRC emacs-lisp
  (use-package try
	  :ensure t)
#+END_SRC

** Which key - shows help on the key bindings
#+BEGIN_SRC emacs-lisp
   (use-package which-key
	  :ensure t 
	  :config
	  (which-key-mode))
#+END_SRC

** Auto complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
   ))

#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC
** Kubernetes
#+BEGIN_SRC emacs-lisp
(use-package kubernetes
   :ensure t)
(use-package kubernetes-evil
   :ensure t)
#+END_SRC
** Http requests for orgmode
#+BEGIN_SRC emacs-lisp
(use-package ob-http
  :ensure t)
#+END_SRC


* Utility functions
** Copy selected file path
#+BEGIN_SRC emacs-lisp

  (defun ssmogos/file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
			default-directory
		      (buffer-file-name))))
      (when filename
	(with-temp-buffer
	  (insert filename)
	  (clipboard-kill-region (point-min) (point-max)))
	(message filename))))


  (global-set-key (kbd "C-c p") 'ssmogos/file-name-on-clipboard)
#+END_SRC

** Use async mode
Lets us use asynchronous processes wherever possible, pretty useful.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
** Set browser
#+BEGIN_SRC emacs-lisp 
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium-browser")
#+END_SRC

** json and yaml func
#+BEGIN_SRC emacs-lisp
  ;; requires https://www.npmjs.com/package/json2yaml
  (defun ssmogos/json2yaml ()
    "Current json buffer to yaml `json2yaml'"
    (interactive)
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "json2yaml"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*json2yaml Buffer*"
     ;; show error buffer?
     t))

  ;; requires npm https://www.npmjs.com/package/yaml2json
  (defun ssmogos/yaml2json ()
    "Current yml buffer to json `yaml2json'"
    (interactive)
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "yaml2json"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*yaml2json Buffer*"
     ;; show error buffer?
     t))

#+END_SRC

** Copy a line
Regardless of where your cursor is, this quickly copies a line.
#+BEGIN_SRC emacs-lisp
  (defun ssmogos/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'ssmogos/copy-whole-line)
#+END_SRC

** Kill a line
And this quickly deletes a line.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC

** Open emacs config
#+BEGIN_SRC emacs-lisp
  (defun ssmogos/config-visit ()
    (interactive)
    (find-file "~/dev/config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'ssmogos/config-visit)
#+END_SRC
** Reload emacs config
#+BEGIN_SRC emacs-lisp
  (defun ssmogos/config-reload ()
    "Reloads config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/dev/config/emacs/config.org")))
  (global-set-key (kbd "C-c r") 'ssmogos/config-reload)
#+END_SRC

* Projectile
Projectile is an awesome project manager, mostly because it recognizes directories
with a =.git= directory as projects and helps you manage them accordingly.

** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
      (projectile-mode 1))
#+END_SRC

** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC


* Dashboard
This is your new startup screen, together with projectile it works in unison and
provides you with a quick look into your latest projects and files.
Change the welcome message to whatever string you want and
change the numbers to suit your liking, I find 5 to be enough.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
     
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+END_SRC


* Babel languages
** Enable languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (shell . t)
         (http . t)
	 ))
#+END_SRC

** Don't ask for confirmation for those languages
#+BEGIN_SRC emacs-lisp
;; disable asking for confirmation on execution in orgmode
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("bash" "sh" "http"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC


* Git integration
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
** Git gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter                                                                                              
    :ensure t                                                                                                          
    :init                                                                                                              
    (when (display-graphic-p)                                                                                          
	(use-package git-gutter-fringe                                                                                 
	  :ensure t))                                                                                                  
    (global-git-gutter-mode)
  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  )   
#+END_SRC


* File utils

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/local/sunrise-commander")
(require 'sunrise-commander)
(require 'sunrise-x-buttons)
(require 'sunrise-x-modeline)
(add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))

#+END_SRC
